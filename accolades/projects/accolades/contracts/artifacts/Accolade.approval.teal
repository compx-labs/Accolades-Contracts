#pragma version 9

// This TEAL was generated by TEALScript v0.102.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(uint64)void
*abi_route_createApplication:
	// accoladeId: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64)void
	callsub createApplication
	int 1
	return

// createApplication(accoladeId: uint64): void
createApplication:
	proto 1 0

	// contracts/Accolade.algo.ts:12
	// this.adminAddress.value = this.txn.sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	txn Sender
	app_global_put

	// contracts/Accolade.algo.ts:13
	// this.accoladeId.value = accoladeId
	byte 0x6163636f6c6164654964 // "accoladeId"
	frame_dig -1 // accoladeId: uint64
	app_global_put
	retsub

// addAccolade(uint64)void
*abi_route_addAccolade:
	// accoladeId: uint64
	txna ApplicationArgs 1
	btoi

	// execute addAccolade(uint64)void
	callsub addAccolade
	int 1
	return

// addAccolade(accoladeId: uint64): void
addAccolade:
	proto 1 0

	// contracts/Accolade.algo.ts:17
	// assert(this.txn.sender === this.adminAddress.value)
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==
	assert

	// contracts/Accolade.algo.ts:18
	// assert(accoladeId !== 0)
	frame_dig -1 // accoladeId: uint64
	int 0
	!=
	assert

	// contracts/Accolade.algo.ts:20
	// sendAssetTransfer({
	//       sender: this.app.address,
	//       assetReceiver: this.app.address,
	//       assetAmount: 0,
	//       xferAsset: AssetID.fromUint64(accoladeId),
	//       fee: 1000,
	//       //note: "registering accolade: " + accoladeId
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/Accolade.algo.ts:21
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/Accolade.algo.ts:22
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/Accolade.algo.ts:23
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/Accolade.algo.ts:24
	// xferAsset: AssetID.fromUint64(accoladeId)
	frame_dig -1 // accoladeId: uint64
	itxn_field XferAsset

	// contracts/Accolade.algo.ts:25
	// fee: 1000
	int 1000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// claimAccolade()void
*abi_route_claimAccolade:
	// execute claimAccolade()void
	callsub claimAccolade
	int 1
	return

// claimAccolade(): void
claimAccolade:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/Accolade.algo.ts:31
	// accoladeBalance = this.app.address.assetBalance(AssetID.fromUint64(this.accoladeId.value))
	global CurrentApplicationAddress
	byte 0x6163636f6c6164654964 // "accoladeId"
	app_global_get
	asset_holding_get AssetBalance
	pop
	frame_bury 0 // accoladeBalance: uint64

	// contracts/Accolade.algo.ts:32
	// assert(accoladeBalance > 0)
	frame_dig 0 // accoladeBalance: uint64
	int 0
	>
	assert

	// contracts/Accolade.algo.ts:34
	// sendAssetTransfer({
	//       xferAsset: AssetID.fromUint64(this.accoladeId.value),
	//       assetAmount: 1,
	//       assetReceiver: this.txn.sender,
	//       fee: 1000,
	//       //note: "Claiming accolade: " + this.accoladeId.value + " for address: " + this.txn.sender
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/Accolade.algo.ts:35
	// xferAsset: AssetID.fromUint64(this.accoladeId.value)
	byte 0x6163636f6c6164654964 // "accoladeId"
	app_global_get
	itxn_field XferAsset

	// contracts/Accolade.algo.ts:36
	// assetAmount: 1
	int 1
	itxn_field AssetAmount

	// contracts/Accolade.algo.ts:37
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/Accolade.algo.ts:38
	// fee: 1000
	int 1000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// retrieveAccolade()void
*abi_route_retrieveAccolade:
	// execute retrieveAccolade()void
	callsub retrieveAccolade
	int 1
	return

// retrieveAccolade(): void
retrieveAccolade:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/Accolade.algo.ts:44
	// assert(this.txn.sender === this.adminAddress.value)
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==
	assert

	// contracts/Accolade.algo.ts:45
	// assert(this.app.address.assetBalance(AssetID.fromUint64(this.accoladeId.value)) > 0)
	global CurrentApplicationAddress
	byte 0x6163636f6c6164654964 // "accoladeId"
	app_global_get
	asset_holding_get AssetBalance
	pop
	int 0
	>
	assert

	// contracts/Accolade.algo.ts:47
	// balance = this.app.address.assetBalance(AssetID.fromUint64(this.accoladeId.value))
	global CurrentApplicationAddress
	byte 0x6163636f6c6164654964 // "accoladeId"
	app_global_get
	asset_holding_get AssetBalance
	pop
	frame_bury 0 // balance: uint64

	// contracts/Accolade.algo.ts:49
	// sendAssetTransfer({
	//       xferAsset: AssetID.fromUint64(this.accoladeId.value),
	//       assetAmount: balance,
	//       assetReceiver: this.txn.sender,
	//       fee: 1000,
	//       //note: "retrieving accolade: " + this.accoladeId.value
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/Accolade.algo.ts:50
	// xferAsset: AssetID.fromUint64(this.accoladeId.value)
	byte 0x6163636f6c6164654964 // "accoladeId"
	app_global_get
	itxn_field XferAsset

	// contracts/Accolade.algo.ts:51
	// assetAmount: balance
	frame_dig 0 // balance: uint64
	itxn_field AssetAmount

	// contracts/Accolade.algo.ts:52
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/Accolade.algo.ts:53
	// fee: 1000
	int 1000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	int 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0
	retsub

*create_NoOp:
	method "createApplication(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "addAccolade(uint64)void"
	method "claimAccolade()void"
	method "retrieveAccolade()void"
	txna ApplicationArgs 0
	match *abi_route_addAccolade *abi_route_claimAccolade *abi_route_retrieveAccolade

	// this contract does not implement the given ABI method for call NoOp
	err

*call_DeleteApplication:
	method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err