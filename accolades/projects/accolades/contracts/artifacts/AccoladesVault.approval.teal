#pragma version 9

// This TEAL was generated by TEALScript v0.102.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *call_OptIn *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(any[])void
*abi_route_createApplication:
	// args: any[]
	txna ApplicationArgs 1
	extract 2 0

	// execute createApplication(any[])void
	callsub createApplication
	int 1
	return

// createApplication(...args: any[]): void
createApplication:
	proto 1 0

	// contracts/AccoladesVault.algo.ts:16
	// this.adminAddress.value = this.txn.sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	txn Sender
	app_global_put

	// contracts/AccoladesVault.algo.ts:17
	// this.registeredAccolades.value = 0
	byte 0x726567697374657265644163636f6c61646573 // "registeredAccolades"
	int 0
	app_global_put
	retsub

// accoladeAlreadyRegisteredCheck(assetId: uint64): void
accoladeAlreadyRegisteredCheck:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// contracts/AccoladesVault.algo.ts:21
	// this.accolades.value.forEach
	byte 0x6163636f6c61646573 // "accolades"
	app_global_get
	dup
	frame_bury 0 // copy of the array we are iterating over
	extract 0 8
	btoi
	frame_bury 1 // id: uint64
	int 0
	frame_bury 2 // the offset we are extracting the next element from

*forEach_0:
	// contracts/AccoladesVault.algo.ts:22
	// assert(id !== assetId)
	frame_dig 1 // id: uint64
	frame_dig -1 // assetId: uint64
	!=
	assert

	// increment offset and loop if not out of bounds
	frame_dig 2 // the offset we are extracting the next element from
	int 8
	+
	dup
	int 4000 // offset of last element
	<
	bz *forEach_0_end
	frame_bury 2 // the offset we are extracting the next element from
	frame_dig 0 // copy of the array we are iterating over
	frame_dig 2 // the offset we are extracting the next element from
	int 8
	extract
	btoi
	frame_bury 1 // id: uint64
	b *forEach_0

*forEach_0_end:
	retsub

// accoladeRegisteredCheck(assetId: uint64): void
accoladeRegisteredCheck:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// contracts/AccoladesVault.algo.ts:26
	// this.accolades.value.forEach
	byte 0x6163636f6c61646573 // "accolades"
	app_global_get
	dup
	frame_bury 0 // copy of the array we are iterating over
	extract 0 8
	btoi
	frame_bury 1 // id: uint64
	int 0
	frame_bury 2 // the offset we are extracting the next element from

*forEach_1:
	// contracts/AccoladesVault.algo.ts:27
	// assert(id === assetId)
	frame_dig 1 // id: uint64
	frame_dig -1 // assetId: uint64
	==
	assert

	// increment offset and loop if not out of bounds
	frame_dig 2 // the offset we are extracting the next element from
	int 8
	+
	dup
	int 4000 // offset of last element
	<
	bz *forEach_1_end
	frame_bury 2 // the offset we are extracting the next element from
	frame_dig 0 // copy of the array we are iterating over
	frame_dig 2 // the offset we are extracting the next element from
	int 8
	extract
	btoi
	frame_bury 1 // id: uint64
	b *forEach_1

*forEach_1_end:
	retsub

// accoladeAlreadyClaimedCheck(assetId: uint64): void
accoladeAlreadyClaimedCheck:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// contracts/AccoladesVault.algo.ts:32
	// this.claimedAccolades(this.txn.sender).value.forEach
	txn Sender
	byte 0x636c61696d65644163636f6c61646573 // "claimedAccolades"
	app_local_get
	dup
	frame_bury 0 // copy of the array we are iterating over
	extract 0 8
	btoi
	frame_bury 1 // id: uint64
	int 0
	frame_bury 2 // the offset we are extracting the next element from

*forEach_2:
	// contracts/AccoladesVault.algo.ts:33
	// assert(id !== assetId)
	frame_dig 1 // id: uint64
	frame_dig -1 // assetId: uint64
	!=
	assert

	// increment offset and loop if not out of bounds
	frame_dig 2 // the offset we are extracting the next element from
	int 8
	+
	dup
	int 4000 // offset of last element
	<
	bz *forEach_2_end
	frame_bury 2 // the offset we are extracting the next element from
	frame_dig 0 // copy of the array we are iterating over
	frame_dig 2 // the offset we are extracting the next element from
	int 8
	extract
	btoi
	frame_bury 1 // id: uint64
	b *forEach_2

*forEach_2_end:
	retsub

// registerAccolade(uint64)void
*abi_route_registerAccolade:
	// assetId: uint64
	txna ApplicationArgs 1
	btoi

	// execute registerAccolade(uint64)void
	callsub registerAccolade
	int 1
	return

// registerAccolade(assetId: uint64): void
registerAccolade:
	proto 1 0

	// contracts/AccoladesVault.algo.ts:38
	// assert(this.txn.sender === this.adminAddress.value)
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==
	assert

	// contracts/AccoladesVault.algo.ts:39
	// this.accoladeAlreadyRegisteredCheck(assetId)
	frame_dig -1 // assetId: uint64
	callsub accoladeAlreadyRegisteredCheck

	// contracts/AccoladesVault.algo.ts:40
	// assert(assetId !== 0)
	frame_dig -1 // assetId: uint64
	int 0
	!=
	assert

	// contracts/AccoladesVault.algo.ts:42
	// sendAssetTransfer({
	//       sender: this.app.address,
	//       assetReceiver: this.app.address,
	//       assetAmount: 0,
	//       xferAsset: AssetID.fromUint64(assetId),
	//       fee: 1000,
	//       note: "registering accolade: " + assetId
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/AccoladesVault.algo.ts:43
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/AccoladesVault.algo.ts:44
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/AccoladesVault.algo.ts:45
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/AccoladesVault.algo.ts:46
	// xferAsset: AssetID.fromUint64(assetId)
	frame_dig -1 // assetId: uint64
	itxn_field XferAsset

	// contracts/AccoladesVault.algo.ts:47
	// fee: 1000
	int 1000
	itxn_field Fee

	// contracts/AccoladesVault.algo.ts:48
	// note: "registering accolade: " + assetId
	byte 0x7265676973746572696e67206163636f6c6164653a20 // "registering accolade: "
	frame_dig -1 // assetId: uint64
	concat
	itxn_field Note

	// Submit inner transaction
	itxn_submit

	// contracts/AccoladesVault.algo.ts:50
	// this.accolades.value[this.registeredAccolades.value] = assetId
	byte 0x6163636f6c61646573 // "accolades"
	app_global_get
	byte 0x726567697374657265644163636f6c61646573 // "registeredAccolades"
	app_global_get
	int 8
	* // acc * typeLength
	frame_dig -1 // assetId: uint64
	itob
	replace3
	byte 0x6163636f6c61646573 // "accolades"
	swap
	app_global_put

	// contracts/AccoladesVault.algo.ts:51
	// this.registeredAccolades.value = this.registeredAccolades.value + 1
	byte 0x726567697374657265644163636f6c61646573 // "registeredAccolades"
	dup
	app_global_get
	int 1
	+
	app_global_put
	retsub

// optInToApplication(any[])void
*abi_route_optInToApplication:
	// args: any[]
	txna ApplicationArgs 1
	extract 2 0

	// execute optInToApplication(any[])void
	callsub optInToApplication
	int 1
	return

// optInToApplication(...args: any[]): void
optInToApplication:
	proto 1 0

	// contracts/AccoladesVault.algo.ts:56
	// this.numClaimedAccolades(this.txn.sender).value = 0
	txn Sender
	byte 0x6e756d436c61696d65644163636f6c61646573 // "numClaimedAccolades"
	int 0
	app_local_put
	retsub

// claimAccolade(uint64)void
*abi_route_claimAccolade:
	// assetId: uint64
	txna ApplicationArgs 1
	btoi

	// execute claimAccolade(uint64)void
	callsub claimAccolade
	int 1
	return

// claimAccolade(assetId: uint64): void
claimAccolade:
	proto 1 0

	// contracts/AccoladesVault.algo.ts:60
	// this.accoladeRegisteredCheck(assetId)
	frame_dig -1 // assetId: uint64
	callsub accoladeRegisteredCheck

	// contracts/AccoladesVault.algo.ts:61
	// this.accoladeAlreadyClaimedCheck(assetId)
	frame_dig -1 // assetId: uint64
	callsub accoladeAlreadyClaimedCheck

	// contracts/AccoladesVault.algo.ts:63
	// sendAssetTransfer({
	//       sender: this.app.address,
	//       assetReceiver: this.txn.sender,
	//       assetAmount: 0,
	//       xferAsset: AssetID.fromUint64(assetId),
	//       fee: 1000,
	//       note: "claiming accolade: " + assetId + " for account: " + this.txn.sender
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/AccoladesVault.algo.ts:64
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// contracts/AccoladesVault.algo.ts:65
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/AccoladesVault.algo.ts:66
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/AccoladesVault.algo.ts:67
	// xferAsset: AssetID.fromUint64(assetId)
	frame_dig -1 // assetId: uint64
	itxn_field XferAsset

	// contracts/AccoladesVault.algo.ts:68
	// fee: 1000
	int 1000
	itxn_field Fee

	// contracts/AccoladesVault.algo.ts:69
	// note: "claiming accolade: " + assetId + " for account: " + this.txn.sender
	byte 0x636c61696d696e67206163636f6c6164653a20 // "claiming accolade: "
	frame_dig -1 // assetId: uint64
	concat
	byte 0x20666f72206163636f756e743a20 // " for account: "
	concat
	txn Sender
	concat
	itxn_field Note

	// Submit inner transaction
	itxn_submit

	// contracts/AccoladesVault.algo.ts:72
	// this.claimedAccolades(this.txn.sender).value[this.numClaimedAccolades(this.txn.sender).value] = assetId
	txn Sender
	byte 0x636c61696d65644163636f6c61646573 // "claimedAccolades"
	app_local_get
	txn Sender
	byte 0x6e756d436c61696d65644163636f6c61646573 // "numClaimedAccolades"
	app_local_get
	int 8
	* // acc * typeLength
	frame_dig -1 // assetId: uint64
	itob
	replace3
	txn Sender
	byte 0x636c61696d65644163636f6c61646573 // "claimedAccolades"
	uncover 2
	app_local_put

	// contracts/AccoladesVault.algo.ts:73
	// this.numClaimedAccolades(this.txn.sender).value = this.numClaimedAccolades(this.txn.sender).value + 1
	txn Sender
	byte 0x6e756d436c61696d65644163636f6c61646573 // "numClaimedAccolades"
	txn Sender
	byte 0x6e756d436c61696d65644163636f6c61646573 // "numClaimedAccolades"
	app_local_get
	int 1
	+
	app_local_put
	retsub

// retrieveAccolade(uint64)void
*abi_route_retrieveAccolade:
	// assetId: uint64
	txna ApplicationArgs 1
	btoi

	// execute retrieveAccolade(uint64)void
	callsub retrieveAccolade
	int 1
	return

// retrieveAccolade(assetId: uint64): void
retrieveAccolade:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts/AccoladesVault.algo.ts:77
	// assert(this.txn.sender === this.adminAddress.value)
	txn Sender
	byte 0x61646d696e41646472657373 // "adminAddress"
	app_global_get
	==
	assert

	// contracts/AccoladesVault.algo.ts:78
	// assert(this.registeredAccolades.value > 0)
	byte 0x726567697374657265644163636f6c61646573 // "registeredAccolades"
	app_global_get
	int 0
	>
	assert

	// contracts/AccoladesVault.algo.ts:79
	// assert(this.app.address.assetBalance(AssetID.fromUint64(assetId)) > 0)
	global CurrentApplicationAddress
	frame_dig -1 // assetId: uint64
	asset_holding_get AssetBalance
	pop
	int 0
	>
	assert

	// contracts/AccoladesVault.algo.ts:81
	// balance = this.app.address.assetBalance(AssetID.fromUint64(assetId))
	global CurrentApplicationAddress
	frame_dig -1 // assetId: uint64
	asset_holding_get AssetBalance
	pop
	frame_bury 0 // balance: uint64

	// contracts/AccoladesVault.algo.ts:83
	// sendAssetTransfer({
	//       xferAsset: AssetID.fromUint64(assetId),
	//       assetAmount: balance,
	//       assetReceiver: this.txn.sender,
	//       fee: 1000,
	//       note: "retrieving accolade: " + assetId
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/AccoladesVault.algo.ts:84
	// xferAsset: AssetID.fromUint64(assetId)
	frame_dig -1 // assetId: uint64
	itxn_field XferAsset

	// contracts/AccoladesVault.algo.ts:85
	// assetAmount: balance
	frame_dig 0 // balance: uint64
	itxn_field AssetAmount

	// contracts/AccoladesVault.algo.ts:86
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/AccoladesVault.algo.ts:87
	// fee: 1000
	int 1000
	itxn_field Fee

	// contracts/AccoladesVault.algo.ts:88
	// note: "retrieving accolade: " + assetId
	byte 0x72657472696576696e67206163636f6c6164653a20 // "retrieving accolade: "
	frame_dig -1 // assetId: uint64
	concat
	itxn_field Note

	// Submit inner transaction
	itxn_submit

	// contracts/AccoladesVault.algo.ts:91
	// this.registeredAccolades.value = this.registeredAccolades.value - 1
	byte 0x726567697374657265644163636f6c61646573 // "registeredAccolades"
	dup
	app_global_get
	int 1
	-
	app_global_put

	// contracts/AccoladesVault.algo.ts:92
	// this.accolades.value[this.registeredAccolades.value] = 0
	byte 0x6163636f6c61646573 // "accolades"
	app_global_get
	byte 0x726567697374657265644163636f6c61646573 // "registeredAccolades"
	app_global_get
	int 8
	* // acc * typeLength
	byte 0x0000000000000000
	replace3
	byte 0x6163636f6c61646573 // "accolades"
	swap
	app_global_put
	retsub

*create_NoOp:
	method "createApplication(any[])void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "registerAccolade(uint64)void"
	method "claimAccolade(uint64)void"
	method "retrieveAccolade(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_registerAccolade *abi_route_claimAccolade *abi_route_retrieveAccolade

	// this contract does not implement the given ABI method for call NoOp
	err

*call_OptIn:
	method "optInToApplication(any[])void"
	txna ApplicationArgs 0
	match *abi_route_optInToApplication

	// this contract does not implement the given ABI method for call OptIn
	err